

const express = require("express")
const {CreateServicePriceOptionsDetails,viewServicePriceOptionsDetails,deleteServicePriceOptionsDetails,updateServicePriceOptionsDetails,getSingleServicePriceOptionsDetails} = require("../controller/ServicePriceOptions_controller")
const router = express.Router()
/**
 * @swagger
 * components:
 *   schemas:
 *     ServicePriceOptions:
 *       type: object
 *       required:
 *         - ServicePriceOptionsId
 *         - serviceId
 *         - Price
 *         - Duration
 *         - Type
 *       properties:
 *         ServicePriceOptionsId:
 *           type: integer
 *           description: Autogeneration
 *         serviceId:
 *           type: string
 *           description: serviceId
 *         Price:
 *           type: string
 *           description: serviceId
 *         Duration:
 *           type: string
 *           description: Duration
 *         Type:
 *           type: string
 *           description: Type
 *       example:
 *         ServicePriceOptionsId: autoGenerated
 *         serviceId: "1245"
 *         Price: 1245
 *         Duration: 3 hours
 *         Type: Weekly
 */

/**
 * @swagger
 * /api/v1/viewServicePriceOptionsDetails:
 *   get:
 *     summary: get all ServicePriceOptions
 *     tags: [ServicePriceOptions]
 *     responses:
 *       200:
 *         description: get All ServicePriceOptions
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               items:
 *                 $ref: '#/components/schemas/ServicePriceOptions'
 */
router.route("/viewServicePriceOptionsDetails").get(viewServicePriceOptionsDetails)


/**
 * @swagger
 * /api/v1/CreateServicePriceOptionsDetails:
 *   post:
 *     summary: add a new ServicePriceOptions
 *     tags: [ServicePriceOptions]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/ServicePriceOptions'
 *     responses:
 *       200:
 *         description: create ServicePriceOptions successfull
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/ServicePriceOptions'
 *       500:
 *         description: Some server error
 */
 router.route("/CreateServicePriceOptionsDetails").post(CreateServicePriceOptionsDetails)

 /**
* @swagger
* /api/v1/deleteServicePriceOptionsDetails/{ServicePriceOptionsId}:
*   delete:
*     summary: Delete a ServicePriceOptions
*     tags: [ServicePriceOptions]
*     parameters:
*         - in: path
*           name: ServicePriceOptionsId
*           required: true
*           description: ServicePriceOptionsId is required
*           schema:
*              type: string
*     responses:
*       200:
*         description: ServicePriceOptions deleted successfully
*/

router.route("/deleteServicePriceOptionsDetails/:ServicePriceOptionsId").delete(deleteServicePriceOptionsDetails)

/**
* @swagger
* /api/v1/updateServicePriceOptionsDetails:
*   post:
*     summary: upAddress ServicePriceOptions Details
*     tags: [ServicePriceOptions]
*     requestBody:
*       required: true
*       content:
*         application/json:
*           schema:
*             $ref: '#/components/schemas/ServicePriceOptions'
*     responses:
*       200:
*         description: upAddress ServicePriceOptions Details successfull
*         content:
*           application/json:
*             schema:
*               $ref: '#/components/schemas/ServicePriceOptions'
*       500:
*         description: Some server error
*/
router.route("/updateServicePriceOptionsDetails").post(updateServicePriceOptionsDetails)

/**
 * @swagger
 * /api/v1/getSingleServicePriceOptionsDetails/{ServicePriceOptionsId}:
 *   get:
 *     summary: Get a ServicePriceOptions by ID
 *     tags: [ServicePriceOptions]
 *     description: Retrieve a ServicePriceOptions by their unique ID.
 *     parameters:
 *       - in: path
 *         name: ServicePriceOptionsId
 *         required: true
 *         description: ID of the ServicePriceOptions to retrieve
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Successfully retrieved the ServicePriceOptions
 *       404:
 *         description: ServicePriceOptions not found
 */
router.route("/getSingleServicePriceOptionsDetails/:ServicePriceOptionsId").get(getSingleServicePriceOptionsDetails)
module.exports = router


  